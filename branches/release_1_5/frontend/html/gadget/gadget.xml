<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="All for Good"
               description="__MSG_description__"
               width="250"
               height="361"
               author="All For Good"
               screenshot="http://developer.gadget.googlepages.com/allforgood.PNG"
               thumbnail="http://developer.gadget.googlepages.com/allforgood.PNG"
               author_email="developer.gadget@google.com">
    <Require feature="setprefs" />
    <Require feature="dynamic-height" />
    <Require feature="views" />
    <Locale lang="en"
            messages="http://developer.gadget.googlepages.com/en_ALL1.6.xml" />
    <Locale messages="http://developer.gadget.googlepages.com/en_ALL1.6.xml" />
  </ModulePrefs>
  <UserPref name="storiesToRead"
            display_name="__MSG_stories_to_read__"
            default_value="4"
            datatype="enum">
    <EnumValue value="4" />
    <EnumValue value="5" />
    <EnumValue value="6" />
    <EnumValue value="7" />
    <EnumValue value="8" />
    <EnumValue value="9" />
    <EnumValue value="10" />
  </UserPref>
  <UserPref name="themesFolder"
            display_name="__MSG_themes_folder__"
            default_value="" />
  <UserPref name="prefLocation"
            display_name="__MSG_default_location__"
            default_value="__MSG_default_location_value__" />
<Content type="html" view="home">
<![CDATA[
<style type="text/css">
body,
div,
form,
h2,
h3,
li,
p,
ul {
  font-weight: normal;
  margin: 0;
  padding: 0;
}
body {
  font-family: arial, sans-serif;
  font-size: 12px;
}
img {
  border: 0;
  cursor: pointer;
}
ul { list-style: none; }
h2 {
  font-size: 100%;
  font-weight: normal;
}
h3 {
  font-size: 100%;
  font-weight: bold;
  line-height: 130%;
}
p,
a,
span { line-height: 130%; }
form { text-align: center; }
form input { vertical-align: middle; }
a,
a:link,
a:visited {
  color: #039;
  text-decoration: none;
}
a:hover {
  color: #039;
  text-decoration: underline;
}
/* Feed data display region. */
.clear {
  clear: both;
  font-size: 0;
  height: 0;
  line-height: 0;
  overflow: hidden;
}
.afg-record {
  border-bottom: 1px solid #666;
  padding: 5px;
}
.afg-record-na {
  height: 60px;
  margin: 20px 0;
  text-align: center;
}
.afg-rec-meta { color: #666; }
.afg-rec-title { font-weight: bold; }
/* Modal popup. */
.afg-mask {
  background-color: #666;
  filter: alpha(opacity=50);
  height: 100%;
  opacity: 0.5;
  width: 100%;
  -moz-opacity: 0.5;
}
.afg-mask,
.afg-dialog {
  left: 0;
  position: absolute;
  top: 0;
}
/* Page layout. */
#afg-header-region {
  background-color: #1155a0;
  overflow: hidden; /* hasLayout trigger */
  width: 100%;
}
#afg-branding-region {
  padding: 5px;
}
#afg-footer-region {
  background-color: #1155a0;
  overflow: hidden; /* hasLayout trigger */
  width: 100%; /* IE6 hasLayout trigger */
}
#afg-footer-content {
  float: right;
}
#afg-content-region {
  background-color: #fff;
  overflow: hidden;
  width: 100%;
}
#afg-branding-btn {
  float: right;
  text-align: left;
}
#afg-branding-title {
  color: #fff;
  margin-right: 50px;
}
#afg-gadget-dialog {
  margin: 60px 5% 0 5%;
  width: 90%;
}
/* Modal popup content. */
#afg-search-text {
  height: 2em;
  padding: 0.25em 0;
  width: 75%;
}
.afg-gobutton { margin-left: 10px; }
/* Pagination. */
.pagination {
  padding: 2px 5px;
  text-align: center;
}
/* Image Cropper. */
.image-cropper {
  display: block;
  overflow: hidden;
  text-align: center;
}
.image-cropper div { margin: 0 -9999px; }
#branding-logo {
  height: 21px;
  width: 160px;
}
#branding-logo img { height: 21px; }

/* Loading. */
#afg-loading-container {
  text-align: center;
  width: 100%;
}
/*
While using these style sheet use src = '/c.gif'
.afg-search-button {
  background: transparent url('http://gadget.js.googlepages.com/search.png') no-repeat scroll 50% 50%;
  height: 23px;
  width: 32px;
}
.afg-embed-button {
  background: transparent url('http://gadget.js.googlepages.com/embed.png') no-repeat scroll 50% 50%;
  height: 21px;
  width: 55px;
}
.afg-go-button {
  background: transparent url('http://gadget.js.googlepages.com/go.png') no-repeat scroll 50% 50%;
  height: 25px;
  width: 43px;
}
*/
</style>
<script type="text/javascript">
/**
 * User prefs.
 * @type {_IG_Prefs}
 */
var prefs = new _IG_Prefs();

/**
 * URL relates to get feed functionality.
 * @type {string}
 * @const
 */
var FEED_URL = 'http://www.allforgood.org/api/volopps?output=rss';

/**
 * To store or cache the feeds between pagination.
 * @type {Array}
 */
var feedRecords = [];

/**
 * Number of pages to be cached on each request to server.
 * @const
 */
var PAGES_PER_QUERY = 3;

/**
 * Parameters to be sent with feed URL to get feeds.
 */
var feedParams = {
  vol_loc: '',
  q: '',
  key: 'gf-gadget',
  start: 1,
  num: prefs.getInt('storiesToRead') * PAGES_PER_QUERY + 1
};

/**
 * To store the information on current page number.
 */
var curPage = 1;

/**
 * To store the next page information for the cached pages during pagination.
 */
var nextPageInfo = {}; // Stores Info like  'page-1' : false|true

/**
 * Adjust the height of the mask automatically.
 * Height 100% for the absolute positioned div is not supported in IE6.
 * This function will be called on window resize event and
 * while showing the Popup container with mask.
 */
function adjustMaskHeight() {
  _gel('afg-gadget-mask').style.height = _gel('afg-main').offsetHeight + 'px';
}

/**
 * Adjust Iframe Height.
 * This function will solve Chrome issue.
 */
function adjustIFrameHeight() {
  var rootElement = _gel('afg-main');
  var gadgetHeight = rootElement.clientHeight || rootElement.offsetHeight;
  _IG_AdjustIFrameHeight(gadgetHeight);
}

/**
 * This method formats the date string to expected format.
 * The expected input format is yyyy-MM-dd hh:mm:ss
 * The expected output format is dd/MM/yyyy
 * @param {string} str The date string from the feed.
 * @return {string} Holds date string in the expected format.
 */
function getDateStr(str) {
  str = str || '';
  str = str.replace(/-/g, '/');
  var date = new Date(str);
  return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');
}

/**
 * @param {string} str The date in string format.
 *     If nothing is passed, returns current date.
 * @return {Date} Returns the date object of the given string.
 */
function getDateObj(str) {
  str = str || '';
  str = str.replace(/-/g, '/');
  return new Date(str);
}

/**
 * Get the Date in the format of : 'yyyyMMddThhmmssZ'.
 * @param {Date} dateObj The date Object which needs to be converted,
 *     into the format of 'yyyyMMddThhmmssZ'.
 * @return {string} Returns formatted date string for given date object.
 */
function getDateStringAsUTC(dateObj) {
  var day = dateObj.getDate();
  var month = dateObj.getMonth() + 1;
  var hour = dateObj.getHours();
  var minute = dateObj.getMinutes();
  var second = dateObj.getSeconds();
  if (day < 10) {
    day = '0' + day;
  }
  if (month < 10) {
    month = '0' + month;
  }
  if (hour < 10) {
    hour = '0' + hour;
  }
  if (minute < 10) {
    minute = '0' + minute;
  }
  if (second < 10) {
    second = '0' + second;
  }
  return '' + dateObj.getFullYear() + month + day + 'T' +
      hour + minute + second + 'Z';
}

/**
 * Get Calendar formatted Duration for the given Start and End date.
 * The format will be '&dates=startdate/enddate',
 * where dates will be in the form of 'yyyyMMddThhmmssZ',
 * when both start date and end date are valid, otherwise returns ''.
 * @param {string} startDate The start date.
 * @param {string} endDate The end date.
 * @return {string} Returns calendar formatted duration as above.
 */
function getDurationForCalendar(startDate, endDate) {
  var startDateObj = getDateObj(startDate);
  var endDateObj = getDateObj(endDate);
  if (startDateObj.getTime() >= endDateObj.getTime()) {
    return '';
  }
  return '&dates=' + getDateStringAsUTC(startDateObj) + '/' +
      getDateStringAsUTC(endDateObj);
}

/**
 * This method will create HTML element string for single feed item.
 * Used for Home & Canvas views.
 * @param {number} feedIndex The json feed with neccessary changes
 *     for single feed item.
 * @return {string} Returns html string for single feed item.
 */
function getHtmlForOneRecord(feedIndex) {
  var obj = feedRecords[feedIndex];
  var sitePageNumber = Math.floor(feedIndex / 10);
  var calendarUrl = 'http://www.google.com/calendar/event?action=TEMPLATE' +
      '&text=' + encodeURIComponent(obj.title) +
      '&details=' + encodeURIComponent(obj.desc) + '...' +
      '&location=' + encodeURIComponent(obj.location) +
      getDurationForCalendar(obj.stdate, obj.enddate);
  var html = [
    '<div class="afg-record ', obj.id, '">',
    '<h3 class="afg-rec-title"> ',
    '<a href="', obj.titleLink, '" target="_blank">', obj.title, '</a>',
    '</h3>',
    '<p class="afg-rec-meta"> ',
    obj.location, ' - ', obj.period,
    '</p>',
    '</div>'
  ];
  return html.join('');
}

/**
 * To show or hide any html element by id.
 * Focus the cursor to the given optional Focus Element.
 * @param {string} elementId The id of the element to be shown or hidden.
 * @param {string} prop The display property to be set.
 * @param {string} optFocusElementId Optional element to set the focus.
 */
function showHideElement(elementId, prop, optFocusElementId) {
  try {
    _gel(elementId).style.display = prop;
    if (prop == 'block') {
      adjustMaskHeight();
    }
    if (optFocusElementId) {
      var focusElement = _gel(optFocusElementId);
      focusElement.focus();
      focusElement.select();
    }
  } catch (err) {}
}

/**
 * This function stops the propagation of the event and
 * prevents the default behaviour of the event.
 * @param {Event} event Window event.
 * @return {boolean} Always false will be returned.
 */
function stopEvents(event) {
  event = event || window.event;
  event.stopPropagation();
  event.preventDefault();
  return false;
}

/**
 * This function updates the Branding title based on the location.
 * @param {string} val Search location value.
 * @param {string} searchText Search text.
 */
function updateTitle(val, searchText) {
  var str = [
    prefs.getMsg('recent_listings_near'), ' <strong>', val, '<\/strong> '
  ];
  if (searchText) {
    str.push(prefs.getMsg('matching'), ' <strong>\'',
        searchText, '\'<\/strong>');
  }
  _gel('afg-branding-title').innerHTML = str.join('');
}

/**
 * Replaces the content region of the container by loading.gif.
 * The width of the passed element will not be changed.
 * The existing height will be retained, if it is more than 50px,
 * otherwise 50px will be set as its height.
 */
function loading() {
  var element = _gel('afg-content');
  var height = element.clientHeight || element.offsetHeight;
  var MIN_HEIGHT = 100;
  if (height < MIN_HEIGHT) {
    height = MIN_HEIGHT;
  }
  var html = [
    '<div id="afg-loading-container" style="',
    'margin:50px 0;height:', height - 100, 'px;">',
    '<img src="http://www.google.com/ig/images/spinner.gif" />',
    '<div>', prefs.getMsg('loading'), '</div></div>'
  ];
  element.innerHTML = html.join('');
}

/**
 * Show the Records and update pagination objects
 */
function showRecordsAndUpdatePagination() {
  var html = [];
  var startIndex = (curPage - 1) * prefs.getInt('storiesToRead');
  var maxEndIndex = startIndex + prefs.getInt('storiesToRead');
  var endIndex = (maxEndIndex < feedRecords.length) ?
                 maxEndIndex : feedRecords.length;
  for (var i = startIndex; i < endIndex; i++) {
    html.push(getHtmlForOneRecord(i));
  }
  // Add pagination.
  if (curPage !== 1 || nextPageInfo['page-' + curPage]) {
    html.push('<div class="pagination">',
              '<div style="width:100%;overflow:hidden;">');
    if (curPage !== 1) {
      html.push('<a href="#" onclick="navigatePage(-1);return false;" ',
                'style="float:left;"  class="afg-pagination">&lt; ',
                prefs.getMsg('previous'), '</a>');
    }
    if (nextPageInfo['page-' + curPage]) {
      html.push('<a href="#" onclick="navigatePage(1);return false;" ',
                'style="float:right;" class="afg-pagination">',
                prefs.getMsg('next'), ' &gt;</a>');
    }
    html.push('</div></div>');
  }
  // Update content in DOM.
  _gel('afg-content').innerHTML = html.join('');
  adjustIFrameHeight();
}

/**
 * Response Error Handler Function.
 * This function will be called if the request is timed out.
 */
function responseErrorHandler() {
  var html = [
    '<div class="afg-record-na">', prefs.getMsg('no_data'),
    '&nbsp;<a href="#" onclick="requestFeed();return false;">',
    prefs.getMsg('try_again'), '</a></div>'
  ];
  _gel('afg-content').innerHTML = html.join('');
  adjustIFrameHeight();
}

/**
 * Update feed records from the received feed XML.
 * @param {Node} xmlContent XML content as callback function response.
 * @param {number} timerId Value which stores a reference to the timer.
 */
function fetchRecords(xmlContent, timerId) {
  // Cancels the timeout set previously.
  clearTimeout(timerId);
  var recordsRequested = prefs.getInt('storiesToRead') * PAGES_PER_QUERY + 1;

  try {
    if (typeof xmlContent != 'object') {
      throw new Error('Invalid feed type');
    }

    var items = xmlContent.getElementsByTagName('item');
    var length = items.length;

    if (!length) {
      throw new Error('No feed available');
    }

    if (length == recordsRequested) {
      length = items.length - 1;
    }

    for (var i = 0; i < PAGES_PER_QUERY; i++) {
      var pageRef = 'page-' + (curPage + i);
      var recordRef = (i + 1) * prefs.getInt('storiesToRead');
      if (items[recordRef]) {
        nextPageInfo[pageRef] = true;
      }
    }

    for (i = 0; i < length; i++) {
      var item = items[i];
      var jsonFeed = {id: 'rec-' + i};
      for (var curNode = item.firstChild; curNode; curNode = curNode.nextSibling) {
        if (curNode.nodeType !== 1) {
          continue;
        }
        var nodeVal = curNode.firstChild ? curNode.firstChild.nodeValue : '';
        switch (curNode.nodeName) {
          case 'title':
            jsonFeed.title = nodeVal;
            break;
          case 'link':
            jsonFeed.titleLink = nodeVal;
            break;
          case 'fp:location_name':
            jsonFeed.location = nodeVal;
            break;
          case 'description':
            jsonFeed.desc = nodeVal;
            break;
          case 'fp:startDate':
            jsonFeed.stdate = nodeVal;
            break;
          case 'fp:endDate':
            jsonFeed.enddate = nodeVal;
            break;
        }
      }
      jsonFeed.period = getDateStr(jsonFeed.stdate) +
          ' - ' + getDateStr(jsonFeed.enddate);
      feedRecords.push(jsonFeed);
    }
    showRecordsAndUpdatePagination();
  } catch (err) {
    // For both 'Invalid feed type' and 'No feed available' Errors,
    // redirect to previous page if available,
    // shows 'Try again' message otherwise.
    if (curPage > 1) {
      nextPageInfo['page-' + (curPage - 1)] = false;
      navigatePage(-1);
    } else {
      var html = [
        '<div class="afg-record-na">', prefs.getMsg('your_search'),
        ' <strong>\'', feedParams.q, '\'</strong> ', prefs.getMsg('not_match'),
        '<br/><a href="#" onclick="showHideElement(\'afg-search-region-home\'',
        ',\'block\', \'afg-search-text\'); return false;">',
        prefs.getMsg('search_again'), '</a></div>'
      ];
      _gel('afg-content').innerHTML = html.join('');
      adjustIFrameHeight();
    }
  }
}

/**
 * Prepare URL and send request for the feed.
 * On successful Ajax call fetchRecords() will be called.
 */
function requestFeed() {
  var feedUrl = [FEED_URL];
  for (var key in feedParams) {
    feedUrl.push(key + '=' + feedParams[key]);
  }
  var feedUrlString = feedUrl.join('&');
  loading();
  // It will call checkResponse function after 5 seconds.
  var timerId = setTimeout(responseErrorHandler, 5000);
  _IG_FetchXmlContent(feedUrlString, _IG_Callback(fetchRecords, timerId));
}

/**
 * This function will be called on all navigation stuff.
 * @param {number} step Navigation steps.
 */
function navigatePage(step) {
  curPage += step;
  // Check for avilablity of records.
  var startIndex = (curPage - 1) * prefs.getInt('storiesToRead');
  if (feedRecords[startIndex]) {
    // Records are already available in the feed, just parse it.
    showRecordsAndUpdatePagination();
  } else {
    // Records are not available, request for records.
    feedParams.start = startIndex + 1;
    requestFeed();
  }
}

/**
 * This function reads the user input,
 * updates its Branding title based on the prefered location,
 * resets the FeedUrl Parameters, cached feed records and meta information.
 * And calls requestFeed() to initiate the request.
 * @param {string} optSearchTxt Optional search text.
 */
function search(optSearchTxt) {
  var location = prefs.getString('prefLocation');
  var searchText = (optSearchTxt && prefs.getMsg(optSearchTxt)) ||
      _gel('afg-search-text').value || '';
  updateTitle(location, searchText);
  location = location.replace(/\s+/gi, '+');
  searchText = searchText.replace(/\s+/gi, '+');

  feedParams.start = 1;
  feedParams.vol_loc = location;
  feedParams.q = searchText;
  // Reset FeedRecord and pagination related variables.
  feedRecords = [];
  curPage = 1;
  nextPageInfo = {};
  requestFeed();
}

/**
 * This function is used to cancel the modal window when 'esc' key is pressed.
 * @param {Event} event Window event.
 */
function isCancel(event) {
  event = event || window.event;
  var key = event.keyCode || event.which || event.charCode;
  if (key == 27) {
    showHideElement('afg-search-region-home', 'none');
  }
}

/**
 * Function to handle custom theme.
 * 
 */
function handleTheme() {
  var themePath = _trim(prefs.getString('themesFolder'));
  var searchButton = _gel('afg-search-button');
  var embedButton = _gel('afg-embed-button');
  var goButton = _gel('afg-go-button');
  var head = document.getElementsByTagName('head')[0];
  var body = document.getElementsByTagName('body')[0];
  if (themePath) {
    var linkElement = document.createElement('link');
    linkElement.id = 'theme-link';
    linkElement.href = themePath + '/style.css';
    linkElement.rel = 'stylesheet';
    head.appendChild(linkElement);
    searchButton.src = themePath + '/search.gif';
    embedButton.src = themePath + '/embed.gif';
    goButton.src = themePath + '/go.gif';
    body.className += ' site-theme';
  } else {
    // Nothing to do right now.
    body.className += ' default-theme';
  }
}

/**
 * Called on load of the gadget.
 */
function init() {
  handleTheme();
  var view = gadgets.views.getCurrentView();
  view = view ? view.getName().toLowerCase() : 'home';
  _gel('afg-main').className = 'afg-' + view + '-body';
  search();
}

/**
 * Resize handler to adjust the mask element height.
 * It sets mask element height equals to the body height.
 */
window.onresize = function() {
  adjustIFrameHeight();
  adjustMaskHeight();
}

/**
 * Entry point.
 */
_IG_RegisterOnloadHandler(init);
</script>
<div id="afg-main">
  <div id="afg-header-region">
    <div id="afg-branding-region">
      <div id="afg-branding-btn">
        <img id="afg-search-button" alt="__MSG_search__" title="__MSG_search__" class="afg-search-button"
            src="http://developer.gadget.googlepages.com/search.gif" onerror="this.src='http://developer.gadget.googlepages.com/search.gif'"
            onclick="showHideElement('afg-search-region-home','block', 'afg-search-text'); return false;">
      </div>
      <h2 id="afg-branding-title"></h2>
      <div class="clear">&nbsp;</div>
    </div>
  </div>
  <div id="afg-content-region">
    <div id="afg-content"></div>
  </div>
  <div id="afg-footer-region">
    <div style="margin:5px">
      <div id="afg-footer-content">
        <form target="_blank" action="http://www.gmodules.com/ig/creator">
          <input type="hidden" name="synd" value="open" />
          <input type="hidden" name="url"
              value="http://footprint2009dev.appspot.com/gadget/gadget.xml"/>
          <input type="image" title="__MSG_embed__" class="afg-embed-button" id="afg-embed-button"
              style="cursor:pointer;" src="http://developer.gadget.googlepages.com/embed.gif" onerror="this.src='http://developer.gadget.googlepages.com/embed.gif'"/>
        </form>
      </div>
      <a id="branding-logo" class="image-cropper" target="_blank"
          href="http://www.allforgood.org">
        <div>
          <img src="http://developer.gadget.googlepages.com/logo.gif"
              alt="__MSG_brand_title__" title="__MSG_brand_title__" />
        </div>
      </a>
    </div>
  </div>
  <!-- Search Region for Home View -->
  <div id="afg-search-region-home" style="display: none;">
    <div id="afg-gadget-mask" class="afg-mask" onclick="return stopEvents(event)"></div>
    <div id="afg-gadget-dialog" class="afg-dialog">
      <form name="frmSearch" action="#" onsubmit="search();showHideElement('afg-search-region-home','none');return false;">
        <input name="searchText" id="afg-search-text" type="text" onkeyup="isCancel(event);" autocomplete="off" />
        <input id="afg-go-button" class="afg-go-button" alt="__MSG_go__" title="__MSG_go__" type="image"
            src="http://developer.gadget.googlepages.com/go.gif" onerror="this.src='http://developer.gadget.googlepages.com/go.gif'"/>
      </form>
    </div>
  </div>
</div>
]]>
</Content>
</Module>

